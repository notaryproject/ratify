apiVersion: config.ratify.dev/v2alpha1
kind: Executor
metadata:
  name: {{ include "ratify.fullname" . }}-executor-1
  labels:
    {{- include "ratify.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "5"
spec:
  scopes:
    {{- if .Values.executor.scopes }}
    {{- toYaml .Values.executor.scopes | nindent 4 }}
    {{- else }}
    {{- fail "executor.scopes must not be empty" }}
    {{- end }}
  stores:
    {{- $root := . -}}
    {{- range .Values.stores }}
    - type: registry-store
      {{- if .scopes }}
      scopes:
        {{- toYaml .scopes | nindent 10 }}
      {{- end }}
      parameters:
        credential:
          provider: "{{ .credential.provider }}"
          {{- if eq .credential.provider "static" }}
          username: "{{ .credential.username }}"
          password: "{{ .credential.password }}"
          {{- end }}
        {{- if eq (include "ratify.cosignConfigured" $root) "true" }}
        allowCosignTag: true
        {{- end }}
    {{- end }}
  verifiers:
    {{- if eq (include "ratify.cosignConfigured" .) "true" }}
    - name: cosign-1
      type: cosign
      parameters:
        trustPolicies:
          - {{- if .Values.cosign.scopes }}
            scopes:
              {{- toYaml .Values.cosign.scopes | nindent 10 }}
            {{- end }}
            certificateIdentity: "{{ .Values.cosign.certificateIdentity }}"
            certificateIdentityRegex: "{{ .Values.cosign.certificateIdentityRegex }}"
            certificateOIDCIssuer: "{{ .Values.cosign.certificateOIDCIssuer }}"
            certificateOIDCIssuerRegex: "{{ .Values.cosign.certificateOIDCIssuerRegex }}"
            ignoreTLog: {{ .Values.cosign.ignoreTLog }}
            ignoreCTLog: {{ .Values.cosign.ignoreCTLog }}
    {{- end }}
    {{- if eq (include "ratify.notationConfigured" .) "true" }}
    - name: notation-1
      type: notation
      parameters:
        {{- if .Values.notation.scopes }}
        scopes:
          {{- toYaml .Values.notation.scopes | nindent 10 }}
        {{- end }}
        {{- if .Values.notation.trustedIdentities }}
        trustedIdentities:
          {{- toYaml .Values.notation.trustedIdentities | nindent 10 }}
        {{- end }}
        certificates:
          - type: "ca"
            {{- if eq (index .Values.notation.certs 0).provider "inline" }}
            inline: {{ (index .Values.notation.certs 0).cert | quote }}
            {{- else if eq (index .Values.notation.certs 0).provider "files" }}
            files:
              - "/usr/local/notation/certs"
            {{- else if eq (index .Values.notation.certs 0).provider "azurekeyvault" }}
            azurekeyvault:
              vaultURL: "{{ (index .Values.notation.certs 0).vaultURL }}"
              clientID: "{{ (index .Values.notation.certs 0).clientID }}"
              tenantID: "{{ (index .Values.notation.certs 0).tenantID }}"
              certificates:
                {{- range $cert := (index .Values.notation.certs 0).certificates }}
                - name: "{{ $cert.name }}"
                  version: "{{ $cert.version | default "" }}"
                {{- end }}
            {{- else }}
            {{- fail (printf "Unsupported notation certificate provider: %s" (index .Values.notation.certs 0).provider) }}
            {{- end }}
    {{- end }}
  policyEnforcer:
    type: "threshold-policy"
    parameters:
      policy:
        threshold: 1
        rules:
          {{- if eq (include "ratify.notationConfigured" .) "true" }}
          - verifierName: "notation-1"
          {{- end }}
          {{- if eq (include "ratify.cosignConfigured" .) "true" }}
          - verifierName: "cosign-1"
          {{- end }}
